version: '3.8'

services:
  rabbitmq_broker:
    image: rabbitmq:3-management
    container_name: rabbitmq_broker
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  node_api:
    build:
      context: ./node-api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=${PORT}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
      - RABBITMQ_ROUTING_KEY=${RABBITMQ_ROUTING_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SES_FROM_EMAIL=${SES_FROM_EMAIL}
    depends_on:
      rabbitmq_broker:
        condition: service_healthy

  go-cli:
    build:
      context: ./go-cli
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
      - RABBITMQ_ROUTING_KEY=${RABBITMQ_ROUTING_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - DEFAULT_RECIPIENT_EMAIL=${DEFAULT_RECIPIENT_EMAIL}
    entrypoint: ["/usr/local/bin/tasks"]
    volumes:
      - tasks_data:/app
    working_dir: /app
    depends_on:
      - rabbitmq_broker

volumes:
  tasks_data:
  rabbitmq_data: